[{"path":"https://ashbaldry.github.io/shinytesters/articles/shinytesters.html","id":"package-level-helpers","dir":"Articles","previous_headings":"","what":"Package Level Helpers","title":"Updating test inputs with shinytesters","text":"package level, function use_shiny_testers available blanket assignment update functions specified package.","code":"test_that(\"When the button is clicked, the options update\", {   use_shiny_testers()      testServer(     app = server_module_fn,      expr = {       # Uninitialised modulehas NULL for inputs       expect_null(input$options)              # After clicking button, options choices and selected option update        session$setInputs(button = 1L)       expect_identical(input$options, \"h\")       expect_identical(input$options.choices, letters)       expect_true(input$check)     }   ) })"},{"path":"https://ashbaldry.github.io/shinytesters/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ashley Baldry. Author, maintainer.","code":""},{"path":"https://ashbaldry.github.io/shinytesters/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baldry (2025). shinytesters: Update 'Shiny' inputs using testServer. R package version 0.1.0, https://ashbaldry.github.io/shinytesters/.","code":"@Manual{,   title = {shinytesters: Update 'Shiny' inputs when using testServer},   author = {Ashley Baldry},   year = {2025},   note = {R package version 0.1.0},   url = {https://ashbaldry.github.io/shinytesters/}, }"},{"path":"https://ashbaldry.github.io/shinytesters/index.html","id":"shinytesters","dir":"","previous_headings":"","what":"Update Shiny inputs when using testServer","title":"Update Shiny inputs when using testServer","text":"aim shinytesters make easier test update functions Shiny packages using testthat::testServer.","code":""},{"path":"https://ashbaldry.github.io/shinytesters/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Update Shiny inputs when using testServer","text":"install latest development version shinytesters, install GitHub:","code":"remotes::install_github(\"ashbaldry/shinytesters\")"},{"path":"https://ashbaldry.github.io/shinytesters/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Update Shiny inputs when using testServer","text":"Add use_shiny_testers() start test using shiny::testServer add inputs relevant arguments test session inputs.","code":"test_that(\"When clicking apply button, checkbox becomes checked\", {   use_shiny_testers()    example_server_fn <- function(input, output, session) {     observeEvent(input$apply_btn, {       updateCheckboxInput(         inputId = \"result\",         label = \"New Label\",         value = TRUE       )     })   }    shiny::testServer(     app = example_server_fn,     expr = {       session$setInputs(apply_btn = 1L)        expect_identical(input$result, TRUE)       expect_identical(input$result.label, \"New Label\")     }   ) })"},{"path":"https://ashbaldry.github.io/shinytesters/reference/create_test_update_fns.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Test Update Functions — create_test_update_fns","title":"Create Test Update Functions — create_test_update_fns","text":"Given set functions R package, create set mocked functions can used bindings test UI updates within `testServer`.","code":""},{"path":"https://ashbaldry.github.io/shinytesters/reference/create_test_update_fns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Test Update Functions — create_test_update_fns","text":"","code":"create_test_update_fns(   fn_names,   id_arg = \"inputId\",   value_args = c(\"value\", \"selected\"),   range_value_args = c(\"start\", \"end\"),   .package = \"shiny\" )"},{"path":"https://ashbaldry.github.io/shinytesters/reference/create_test_update_fns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Test Update Functions — create_test_update_fns","text":"fn_names character vector (string) function names create wrappers id_arg character string argument `fn_names` relates HTML ID argument. Default \"inputId\" value_args character vector arguments `fn_names` relate input value arguments. Defaults `\"value\"` `\"selected`. range_value_args character vector arguments `fn_names` relate input value arguments multiple arguments can used update input. Defaults `\"start\"` `\"end\"`. .package Character string package `fn_names` exist . Default `\"shiny\"`","code":""},{"path":"https://ashbaldry.github.io/shinytesters/reference/create_test_update_fns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Test Update Functions — create_test_update_fns","text":"named list function expressions, one function supplied `fn_names`.","code":""},{"path":"https://ashbaldry.github.io/shinytesters/reference/create_test_update_fns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Test Update Functions — create_test_update_fns","text":"","code":"create_test_update_fns(   c(\"updateSelectInput\", \"updateTextInput\"),   .package = \"shiny\" ) #> $updateSelectInput #> function (session = getDefaultReactiveDomain(), inputId, label = NULL,  #>     choices = NULL, selected = NULL)  #> { #>     fn_args <- rlang::fn_fmls_names() #>     session_arg <- grep(\"session\", fn_args, value = TRUE) #>     if (length(session_arg) != 1L) { #>         cli::cli_abort(\"Unable to determine session argument for {.fn {fn_name}}\") #>     } #>     id_value <- get(id_arg) #>     value_arg <- update_value(id = id_value, fn_args = fn_args,  #>         value_args = value_args, range_value_args = range_value_args,  #>         session = session) #>     if (.package == \"shiny\") { #>         id_choice_value <- paste(id_value, \"choices\", sep = \".\") #>         choice_args <- grep(\"choice(Names|Values)\", fn_args,  #>             value = TRUE) #>         valid_choice_args <- length(choice_args) == 2L && \"choices\" %in%  #>             fn_args && is.null(get(\"choices\")) && !is.null(get(\"choiceNames\")) #>         if (valid_choice_args) { #>             update_input(id = id_choice_value, value = stats::setNames(get(\"choiceValues\"),  #>                 get(\"choiceNames\")), session = session) #>         } #>         data_arg <- grep(\"data\", fn_args, value = TRUE) #>         if (length(data_arg) == 1L && !is.null(get(\"data\"))) { #>             update_input(id = id_choice_value, value = names(get(\"data\")),  #>                 session = session) #>         } #>     } #>     else { #>         choice_args <- data_arg <- NULL #>     } #>     other_args <- setdiff(fn_args, c(session_arg, id_arg, value_arg,  #>         choice_args, data_arg)) #>     for (other_arg in other_args) { #>         update_input(id = paste(id_value, other_arg, sep = \".\"),  #>             value = get(other_arg), session = session) #>     } #> } #> <environment: 0x558249a69a90> #>  #> $updateTextInput #> function (session = getDefaultReactiveDomain(), inputId, label = NULL,  #>     value = NULL, placeholder = NULL)  #> { #>     fn_args <- rlang::fn_fmls_names() #>     session_arg <- grep(\"session\", fn_args, value = TRUE) #>     if (length(session_arg) != 1L) { #>         cli::cli_abort(\"Unable to determine session argument for {.fn {fn_name}}\") #>     } #>     id_value <- get(id_arg) #>     value_arg <- update_value(id = id_value, fn_args = fn_args,  #>         value_args = value_args, range_value_args = range_value_args,  #>         session = session) #>     if (.package == \"shiny\") { #>         id_choice_value <- paste(id_value, \"choices\", sep = \".\") #>         choice_args <- grep(\"choice(Names|Values)\", fn_args,  #>             value = TRUE) #>         valid_choice_args <- length(choice_args) == 2L && \"choices\" %in%  #>             fn_args && is.null(get(\"choices\")) && !is.null(get(\"choiceNames\")) #>         if (valid_choice_args) { #>             update_input(id = id_choice_value, value = stats::setNames(get(\"choiceValues\"),  #>                 get(\"choiceNames\")), session = session) #>         } #>         data_arg <- grep(\"data\", fn_args, value = TRUE) #>         if (length(data_arg) == 1L && !is.null(get(\"data\"))) { #>             update_input(id = id_choice_value, value = names(get(\"data\")),  #>                 session = session) #>         } #>     } #>     else { #>         choice_args <- data_arg <- NULL #>     } #>     other_args <- setdiff(fn_args, c(session_arg, id_arg, value_arg,  #>         choice_args, data_arg)) #>     for (other_arg in other_args) { #>         update_input(id = paste(id_value, other_arg, sep = \".\"),  #>             value = get(other_arg), session = session) #>     } #> } #> <environment: 0x558249a7bed0> #>"},{"path":"https://ashbaldry.github.io/shinytesters/reference/use_shiny_testers.html","id":null,"dir":"Reference","previous_headings":"","what":"Use Shiny Testers — use_shiny_testers","title":"Use Shiny Testers — use_shiny_testers","text":"Enable `update` functions Shiny Shiny extension package mocked tests.","code":""},{"path":"https://ashbaldry.github.io/shinytesters/reference/use_shiny_testers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use Shiny Testers — use_shiny_testers","text":"","code":"use_shiny_testers(..., .package = \"shiny\", .env = rlang::caller_env())  with_shiny_testers(code, ..., .package = \"shiny\")"},{"path":"https://ashbaldry.github.io/shinytesters/reference/use_shiny_testers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use Shiny Testers — use_shiny_testers","text":"... Arguments passed create_test_update_fns .package Character string package update functions exist . Default `\"shiny\"` .env Environment defines effect scope. expert use . code Code execute specified bindings.","code":""},{"path":"https://ashbaldry.github.io/shinytesters/reference/use_shiny_testers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use Shiny Testers — use_shiny_testers","text":"Implicit return updated functions supplied package within specified environment.","code":""},{"path":"https://ashbaldry.github.io/shinytesters/reference/use_shiny_testers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use Shiny Testers — use_shiny_testers","text":"","code":"library(shiny) library(testthat)  example_server_fn <- function(input, output, session) {   observeEvent(input$trigger, {       updateTextInput(       inputId = \"result\",       label = \"New Label\",       value = NULL,       placeholder = \"New placeholder\"     )   }) }  test_that(\"Check that text input gets updated\", {   use_shiny_testers()    shiny::testServer(     app = example_server_fn,     expr = {       session$setInputs(result = \"Example text\")       session$setInputs(trigger = 1L)        expect_identical(input$result, \"Example text\")       expect_identical(input$result.label, \"New Label\")       expect_identical(input$result.placeholder, \"New placeholder\")     }   ) }) #> Test passed 🥇"},{"path":"https://ashbaldry.github.io/shinytesters/news/index.html","id":"shinytesters-010","dir":"Changelog","previous_headings":"","what":"shinytesters 0.1.0","title":"shinytesters 0.1.0","text":"Initial release package","code":""}]
